#
# Multiverse - p2p online virtual community
# Copyright (C) 2006  Nathan C. Matthews <lowentropy@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


# this file is basically relaxed YAML.
# each line is an entry of the format
#		name [: [type [= value]]
# lines thereafter, if they are tabbed
# right, are members of this entry.
#
# sometimes the type can be inferred,
# such as a flag inside a flags entry
# or case inside an option entry.
#
# if the type = "value" format is used,
# the value will be given a default.
#
# there are a few basic types, whose
# entries cannot have sub-members.
# they are:
#
#		string						utf-8 string of variable length
#		u8|u16|u32|u64		unsigned integer of given bit length
#		s8|s16|s32|s64		signed integer of given bit length
#		f32|f64						floating-point of given precision
#		uid								unique 64-bit identifier
#		sid								sequential 32-bit identifier
#		flag							presence flag (in flags entry)
#		bit								single bit (in bitmask entry)
#		bool							boolean value
#		date							a datetime
#		version						major.minor.patch
#		protocol_ref			protocol reference; name [version range]
#		optional					use name: optional = type / ....
#
# the 'non-terminal' types are as follows:
#
#		list							list of zero or more entries
#		array							template for multiples of single type
#		namespace					named entry (allows nesting)
# 	message						message template
#		flags							set of flags to pack as bitmask
#		bitmask						bitmask packed to nearest byte
#		option						like an enumeration type
#		type							define a new type to be used later
#		protocol					defines a message protocol set
#		extend						list of extended protocols


protocol: type
u8: type
u16: type
u32: type
u64: type
s8: type
s16: type
s32: type
s64: type
f32: type
f64: type
version: type
string: type
date: type
list: type
uid: type
sid: type
bool: type
case: type
optional: type
data: type
array: type
namespace: type
flag: type
bit: type
struct: type
option: type
	subtype: string = case
	choice: u8
flags: type
	subtype: string = flag
bitmask: type
	subtype: string = bit


mv: protocol

	version:	version	= 0.0.1
	author:		string	=	Nathan Matthews
	email: 		string	=	lowentropy@gmail.com
	created:	date		=	20070307
	updated:	date		= 20070308

	types: list

		message: type
			message_id: sid
			sender: uid
			signed: bool = false
			encrypted: bool = false
		
		secure_mode: type = option
			rsa:
				key: optional = data
			aes:
				key: optional = data

		vector: type
			x: f64
			y: f64
			z: f64

		screen_pos: type = option
			click:
				click_id: sid
			coord:
				x: u16
				y: u16
			object:
				object_id: uid
			anywhere:

		hostinfo: type = struct
			host_id: uid
			address: optional = string
			port: optional = u16

		script: type = struct
			id: uid
			body: option
				inline:
					text: data
				resource:
					id: uid

		protocol_versions: type = array
			protocol_version: struct
				id: uid
				version: version
			

	messages: list

		multiple: message
			messages: array
				message: message
		
		sync_message: message
			sync_id: uid
			payload: data

		sync_response: message
			sync_id: uid
			payload: data
		
		signed_message: message
			signer: uid
			payload: data

		secure_message: message
			recipient: uid
			mode: option
				public
				session:
					session_id: uid
			payload: data

		chat: message
			text: data
